{"version":3,"sources":["components/Titlebar.tsx","components/TextGallery.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Titlebar","className","src","process","alt","map","b","i","href","toLowerCase","TextGallery","props","useState","index","setIndex","dots","children","push","join","onClick","length","App","id","style","backgroundColor","autoAdvance","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAEe,SAASA,IAIpB,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,eACX,yBACIC,IAAKC,qCACLF,UAAU,OACVG,IAAI,UAGZ,yBAAKH,UAAU,QACX,0BAAMA,UAAU,QAAhB,cADJ,gCAGA,yBAAKA,UAAU,mBAdP,CAAC,OAAQ,WAAY,UAAW,YAAa,SAexCI,KAAI,SAACC,EAAGC,GAAJ,OAAU,uBACnBN,UAAU,SACVO,KAAM,IAAMF,EAAEG,eAEbH,Q,WChBN,SAASI,EAAYC,GAMhC,IANwE,IAAD,EAE7CC,mBAAS,GAFoC,mBAEhEC,EAFgE,KAEzDC,EAFyD,KAInEC,EAAO,GACPC,EAAWL,EAAMK,UAAY,GALsC,WAM9DT,GACLQ,EAAKE,KAAK,0BACNhB,UAAW,CAAC,MAAOM,IAAMM,EAAQ,cAAgB,IAAIK,KAAK,KAC1DC,QAAS,kBAAML,EAASP,QAHvBA,EAAI,EAAGA,EAAIS,EAASI,OAAQb,IAAM,EAAlCA,GAOT,OACI,yBAAKN,UAAU,eACX,yBAAKA,UAAU,SACVe,EAASH,IAEd,yBAAKZ,UAAU,aACVc,ICuDFM,MA5Ef,WACC,OACC,yBAAKpB,UAAU,OAEL,kBAACD,EAAD,MAEA,yBAAKsB,GAAG,OAAOrB,UAAU,WACrB,yBAAKA,UAAU,cACf,ieAKJ,yBAAKqB,GAAG,WAAWrB,UAAU,UAAUsB,MAAO,CACtCC,gBAAiB,YAErB,yBAAKvB,UAAU,aAAf,YAGA,kBAACS,EAAD,CAAae,YAAa,GACtB,6BACI,sCACA,uJAEJ,6BACI,0CACA,uPAEJ,6BACI,yCACA,2KAKZ,yBAAKH,GAAG,UAAUrB,UAAU,UAAUsB,MAAO,CACrCC,gBAAiB,YAErB,yBAAKvB,UAAU,aAAf,WAGA,6BACI,2CACA,6GAAkF,uBAAGO,KAAK,6DAA6DkB,OAAO,SAASC,IAAI,uBAAzF,kBAAlF,MAEJ,6BACI,0CACA,kHAAuF,uBAAGnB,KAAK,mEAAmEkB,OAAO,SAASC,IAAI,uBAA/F,SAAvF,OAIR,yBAAKL,GAAG,YAAYrB,UAAU,UAAUsB,MAAO,CACvCC,gBAAiB,UAErB,yBAAKvB,UAAU,aAAf,aAHJ,81BASA,yBAAKqB,GAAG,QAAQrB,UAAU,UAAUsB,MAAO,CACnCC,gBAAiB,YAErB,yBAAKvB,UAAU,aAAf,SAHJ,81BASA,yBAAKA,UAAU,UAAf,6BC9DQ2B,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCZHC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDiIpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAAAC,GACLA,EAAaC,gBAEbC,OAAM,SAAAC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea7a679c.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\n\nexport default function Titlebar(): ReactElement {\n\n    const buttons = ['Home', 'Features', 'Preview', 'Downloads', 'About']\n\n    return (\n        <div className='header'>\n            <div className='logoWrapper'>\n                <img\n                    src={process.env.PUBLIC_URL + '/images/favicon.png'}\n                    className='logo'\n                    alt='logo'\n                />\n            </div>\n            <div className='name'>\n                <span className='bold'>Tournament</span> by Oxford Chess Development\n            </div>\n            <div className='buttonContainer'>\n                {buttons.map((b, i) => <a\n                    className='button'\n                    href={'#' + b.toLowerCase()}\n                >\n                    {b}\n                </a>)}                    \n            </div>\n        </div>\n    );\n}","import React, { ReactElement, useState } from 'react';\n\ninterface TextGalleryProps {\n    children?: JSX.Element[]\n    autoAdvance?: number\n}\n\nexport default function TextGallery(props: TextGalleryProps): ReactElement {\n\n    const [index, setIndex] = useState(0);\n\n    let dots = [] as ReactElement[];\n    let children = props.children || []\n    for (let i = 0; i < children.length; i++) {\n        dots.push(<span\n            className={['dot', i === index ? 'dotSelected' : ''].join(' ')}\n            onClick={() => setIndex(i)}\n        />);\n    }\n\n    return (\n        <div className='textGallery'>\n            <div className='stage'>\n                {children[index]}\n            </div>\n            <div className='selection'>\n                {dots}\n            </div>\n        </div>\n    );\n}","import React, { ReactElement } from 'react';\nimport './App.css';\nimport Titlebar from './components/Titlebar';\nimport TextGallery from './components/TextGallery';\n\nfunction App(): ReactElement {\n\treturn (\n\t\t<div className='App'>\n            \n            <Titlebar />\n\n            <div id='home' className='section'>\n                <div className='subheader' />\n                <div>\n                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n                </div>\n            </div>\n\n            <div id='features' className='section' style={{\n                    backgroundColor: '#2d132c'\n                }}>\n                <div className='subheader'>\n                    Features\n                </div>\n                <TextGallery autoAdvance={1}>\n                    <div>\n                        <h3>Modern</h3>\n                        <p>Built with the latest front-end technologies and constantly updated. Designed to work on any platform, cross-platform. </p>\n                    </div>\n                    <div>\n                        <h3>Functional</h3>\n                        <p>Gone are the days of a single-use single-method platform. Tournament seeks to let tournament creators run things the way they want, providing as many different options and variations as possible to suit their needs.</p>\n                    </div>\n                    <div>\n                        <h3>Intuitive</h3>\n                        <p>Tournament seeks to place everything right where you expect. Any feature you might be looking for there is there, right when you need it.</p>\n                    </div>\n                </TextGallery>\n            </div>\n\n            <div id='preview' className='section' style={{\n                    backgroundColor: '#2d132c'\n                }}>\n                <div className='subheader'>\n                    Preview\n                </div>\n                <div>\n                    <h3>Desktop App</h3>\n                    <p>The desktop (organiser) app of this software is available to beta test on this <a href='http://toastie-desktop.s3-website.eu-west-2.amazonaws.com/' target='_blank' rel='noopener noreferrer'>online webpage</a>.</p>\n                </div>\n                <div>\n                    <h3>Mobile App</h3>\n                    <p>The design of the mobile (player) app of this software has been published online on <a href='https://www.figma.com/file/74z1QM0ZdtdF2TrKiiAiFj/toastie-mobile' target='_blank' rel='noopener noreferrer'>Figma</a>.</p>\n                </div>\n            </div>\n\n            <div id='downloads' className='section' style={{\n                    backgroundColor: 'lilac'\n                }}>\n                <div className='subheader'>\n                    Downloads\n                </div>\n                Hello world\n                \"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\"\n            </div>\n            <div id='about' className='section' style={{\n                    backgroundColor: '#801336'\n                }}>\n                <div className='subheader'>\n                    About\n                </div>\n                Hello world\n                \"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\"\n            </div>\n            <div className='footer'>\n                Â© Aloysius Lip, 2020\n            </div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\tprocess.env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// 'Content is cached for offline use.' message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}