{"version":3,"sources":["components/Titlebar.tsx","components/TextGallery.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Titlebar","props","className","src","alt","map","b","onClick","setID","TextGallery","useState","index","setIndex","useReducer","state","action","setTimeout","setHasClicked","hasClicked","length","children","dots","i","push","join","updateIndex","useCallback","x","autoAdvance","clearTimeout","useEffect","style","left","c","App","id","toLowerCase","window","location","hash","document","getElementsByTagName","element","getElementById","scrollTo","top","offsetTop","innerHeight","behavior","scrollToID","backgroundColor","href","target","rel","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f90fbe3c.chunk.js","sourcesContent":["import React, { ReactElement, Dispatch, SetStateAction } from 'react';\n\nexport interface TitlebarProps {\n    setID: Dispatch<SetStateAction<string>>\n}\n\nexport default function Titlebar(props: TitlebarProps): ReactElement {\n\n    const buttons = ['Home', 'Features', 'Preview', 'Downloads', 'About']\n\n    return (\n        <div className='header'>\n            <div className='logoWrapper'>\n                <img\n                    src={process.env.PUBLIC_URL + '/images/favicon.png'}\n                    className='logo'\n                    alt='logo'\n                />\n            </div>\n            <div className='nameWrapper'>\n                <div className='name'>\n                    <span className='bold'>Tournament</span> by Oxford Chess Development\n                </div>\n            </div>\n            <div className='buttonContainer'>\n                {buttons.map((b) => <a\n                    className='button'\n                    onClick={() => props.setID(b)}\n                >\n                    {b}\n                </a>)}              \n            </div>\n        </div>\n    );\n}","import React, { ReactElement, useState, useEffect, useReducer, useCallback } from 'react';\n\ninterface TextGalleryProps {\n    children?: JSX.Element[]\n    autoAdvance?: number\n}\n\nexport default function TextGallery(props: TextGalleryProps): ReactElement {\n\n    const [index, setIndex] = useState(0);\n    const [hasClicked, setHasClicked] = useReducer((state: boolean, action: boolean): boolean => {\n        if (action) setTimeout(() => setHasClicked(false), 10000);\n        return action;\n    }, false);\n    let length = props.children ? props.children.length : 0;\n\n    let dots = [] as ReactElement[];\n    let children = props.children || []\n    for (let i = 0; i < children.length; i++) {\n        dots.push(<span\n            className={['dot', i === index ? 'dotSelected' : ''].join(' ')}\n            onClick={() => {\n                setIndex(i);\n                setHasClicked(true);\n            }}\n        />);\n    }\n\n    const updateIndex = useCallback(() => {\n        if (!props.autoAdvance) return;\n        let x: NodeJS.Timeout;\n        if (!hasClicked) x = setTimeout(() => setIndex((index + 1) % length), props.autoAdvance);\n        return () => {\n            clearTimeout(x);\n        }\n    }, [index, length, props.autoAdvance, hasClicked]);\n\n    useEffect(updateIndex, [updateIndex]);\n\n    return (\n        <div className='textGallery'>\n            <div className='stage' style={{\n                left: `calc(-100% * ${index})`\n            }}>\n                {children.map(c => <div>{c}</div>)}\n            </div>\n            <div className='selection'>\n                {dots}\n            </div>\n        </div>\n    );\n}","import React, { ReactElement, useEffect, useState } from 'react';\nimport './App.css';\nimport Titlebar, { TitlebarProps } from './components/Titlebar';\nimport TextGallery from './components/TextGallery';\n\nfunction scrollToID({ id }: { id: string }) {\n\n    if (id.toLowerCase() === 'home') window.location.hash = '';\n    else window.location.hash = '#' + id.toLowerCase();\n    let body = document.getElementsByTagName('BODY')[0];\n    if (!body) return;\n    let element = document.getElementById('section-' + id.toLowerCase()) as HTMLDivElement;\n    if (!element) return;\n    window.scrollTo({\n        top: element.offsetTop - (window.innerHeight * 0.12),\n        left: 0,\n        behavior: 'smooth'\n    });\n}\n\nfunction App(): ReactElement {\n\n    const [id, setID] = useState('');\n    scrollToID({ id });\n\n\treturn (\n\t\t<div className='App'>\n            \n            <Titlebar setID={setID} />\n\n            <div id='section-home' className='section' style={{\n                    backgroundColor: '#111111'\n                }}>\n                <div className='subheader' />\n                <div className='imageWrapper'>\n                    <img className='homeImage' src={process.env.PUBLIC_URL + '/images/cover-plain.jpg'} alt='Tournament by Oxford Chess Development' />\n                </div>\n            </div>\n\n            <div id='section-features' className='section' style={{\n                    backgroundColor: 'rgb(44, 49, 19)'\n                }}>\n                <div className='subheader'>\n                    Features\n                </div>\n                <TextGallery autoAdvance={3000}>\n                    <div>\n                        <h3>Modern</h3>\n                        <p>Built with the latest front-end technologies and constantly updated. Designed to work on any platform, cross-platform. </p>\n                    </div>\n                    <div>\n                        <h3>Functional</h3>\n                        <p>Gone are the days of a single-use single-method platform. Tournament seeks to let tournament creators run things the way they want, providing as many different options and variations as possible to suit their needs.</p>\n                    </div>\n                    <div>\n                        <h3>Intuitive</h3>\n                        <p>Tournament seeks to place everything right where you expect. Any feature you might be looking for there is there, right when you need it.</p>\n                    </div>\n                </TextGallery>\n            </div>\n\n            <div id='section-preview' className='section' style={{\n                    backgroundColor: '#2d132c'\n                }}>\n                <div className='subheader'>\n                    Preview\n                </div>\n                <div className='subsection'>\n                    <h3>Desktop App</h3>\n                    <p>The desktop (organiser) app of this software is available to beta test on this <a href='http://beta.oxfordchess.co.uk/' target='_blank' rel='noopener noreferrer'>online webpage</a>.</p>\n                    <div className='installer'>\n                        <img src={process.env.PUBLIC_URL + '/images/linux.png'} alt='linux' />\n                        <a className='downloadLink' href={process.env.PUBLIC_URL + '/installers/toastie-desktop_0.5.4_amd64.deb'}>\n                            <div className='downloadTitle'>↧ .deb</div>\n                            <div>Debian, Ubuntu</div>\n                        </a>\n                    </div>\n                </div>\n                <div className='subsection'>\n                    <h3>Mobile App</h3>\n                    <p>The design of the mobile (player) app of this software has been published online on <a href='https://www.figma.com/file/74z1QM0ZdtdF2TrKiiAiFj/toastie-mobile' target='_blank' rel='noopener noreferrer'>Figma</a>.</p>\n                </div>\n            </div>\n\n            <div id='section-downloads' className='section' style={{\n                    backgroundColor: 'lilac'\n                }}>\n                <div className='subheader'>\n                    Downloads\n                </div>\n                The Desktop version of this app will be available to download for Windows, Mac, and Debian-based Linux distributions. The mobile client for players will be available on the AppStore and the Google Play Store.\n            </div>\n            <div id='section-about' className='section' style={{\n                    backgroundColor: 'rgb(80, 5, 5)'\n                }}>\n                <div className='subheader'>\n                    About\n                </div>\n                Aloysius Lip is a 2nd-year undergraduate student at the University of Oxford and the current President of the Oxford University Chess Club. He enjoys programming in his free time.\n            </div>\n            <div className='footer'>\n                <div className='icons'>\n                    <a href='https://facebook.com/oxfordchess' target='_blank' rel='noopener noreferrer'>\n                        <img src={process.env.PUBLIC_URL + '/icons/facebook.png'} />\n                    </a>\n                    <a href='https://aloysiuslip.com' target='_blank' rel='noopener noreferrer'>\n                        <img src={process.env.PUBLIC_URL + '/icons/website.png'} />\n                    </a>\n                    <a href='http://beta.oxfordchess.co.uk/' target='_blank' rel='noopener noreferrer'>\n                        <img src={process.env.PUBLIC_URL + '/icons/desktop.png'} />\n                    </a>\n                    <a href='https://www.figma.com/file/74z1QM0ZdtdF2TrKiiAiFj/toastie-mobile' target='_blank' rel='noopener noreferrer'>\n                        <img src={process.env.PUBLIC_URL + '/icons/mobile.png'} />\n                    </a>\n                    <a href='mailto:aloysius.lip@gmail.com' target='_blank' rel='noopener noreferrer'>\n                        <img src={process.env.PUBLIC_URL + '/icons/email.png'} />\n                    </a>\n                </div>\n                <div className='author'>Copyright 2020, Aloysius Lip</div>\n            </div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\tprocess.env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// 'Content is cached for offline use.' message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}